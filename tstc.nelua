require 'vector'
require 'string'
require 'stringbuilder'
require 'C.stdio'
require 'io'
local ASTNode: type <forwarddecl> = @record{}
local Token:type=@record{
    type:string,
    value:string,
}
local Callee:type=@record{
    type:string,
    name:string,
}
local Expression:type=@record{
    type:string,
    callee:record{
        type:string,
        name:string,
    },
    arguments:vector(*ASTNode),
}
local ASTNode:type=@record{
    type:string,
    u:union{
        Program:record{
            body:vector(*ASTNode),
        },
        NumberLiteral:record{
            value:string,
        },
        StringLiteral:record{
            value:string,
        },
        CallExpression:record{
            name:string,
            params:vector(*ASTNode),
        },
        ExpressionStatement:record{
            expression:Expression,
        },
    },
    _context:*vector(*ASTNode),
}
local function print_AST_R(node: ASTNode, nest: integer)
    for i=0,<nest do
        --C.printf("\t")
        io.stdout:write("\t")
    end
    C.printf("%s", node.type)
    if node.type=='Program' then
        print(' body=\\')
        for i=0,<#node.u.Program.body do
            print_AST_R(node.u.Program.body[i], nest + 1)
        end
    end
    if node.type=='NumberLiteral' or node.type=='StringLiteral' then
        C.printf(" value=%s\n", node.u.NumberLiteral.value)
    end
    if node.type=='CallExpression' then
        C.printf(" name=%s", node.u.CallExpression.name)
        --C.printf(" params=\\\n")
        io.stdout:write(" params=\\\n")
        for i=0,<#node.u.CallExpression.params do
            print_AST_R(node.u.CallExpression.params[i], nest + 1)
        end
    end
end
local function print_AST(ast: ASTNode)
    print_AST_R(ast, 0)
end
--[[local function print_newAST_R(node: ASTNode, nest: integer)
    for i=0,<nest do
        --C.printf("\t")
        io.stdout:write("\t")
    end
    C.printf("%s", node.type)
    if node.type=='Program' then
        print(' body=\\')
        for i=0,<#node.u.Program.body do
            print_newAST_R(node.u.Program.body[i], nest + 1)
        end
    end
    if node.type=='NumberLiteral' or node.type=='StringLiteral' then
        C.printf(" value=%s\n", node.u.NumberLiteral.value)
    end
    if node.type=='CallExpression' then
        C.printf(" callee type=%s name=%s", node.u.CallExpression.callee.type, node.callee.name)
        io.stdout:write(" arguments=\\\n")
        for i=0,<#node.arguments do
            print_newAST_R(node.arguments[i], nest + 1)
        end
    end
end
local function print_newAST(ast: ASTNode)
    print_newAST_R(ast, 0)
end]]
local function is_space(c:byte)
    return c==' '_byte or c<='\n'_byte
end
local function is_number(c:byte)
    return c>='0'_byte and c<='9'_byte
end
local function is_letter(c:byte)
    return c>='a'_byte and c<='z'_byte
end
local function tokenizer(input: string): vector(Token)
    local current=0
    local tokens:vector(Token)
    while current<#input do
        local c=input.data[current]
        if c=='('_byte then
            tokens:push(Token{'paren','('})
            current=current+1
            continue
        end
        if c==')'_byte then
            tokens:push(Token{'paren',')'})
            current=current+1
            continue
        end
        if is_space(c) then
            current=current+1
            continue
        end
        if is_number(c) then
            local sb:stringbuilder
            while is_number(c) do
                sb:write_byte(c)
                current=current+1
                c=input.data[current]
            end
            local value:stringview=sb
            tokens:push(Token{'number',value})
            continue
        end
        if is_letter(c) then
            local sb:stringbuilder
            while is_letter(c) do
                sb:write_byte(c)
                current=current+1
                c=input.data[current]
            end
            local value:stringview=sb
            tokens:push(Token{'name',value})
            continue
        end
        error(string.format("I don't know what this character is: `%c`", c))
    end
    return tokens
end
local function parser(tokens: vector(Token)): ASTNode
    local function walk(current: integer, tokens:vector(Token))
        local token = tokens[current]
        if token.type == 'number' then
            current=current+1
            return current,ASTNode{
                type='NumberLiteral',
                u={
                    NumberLiteral={
                        value=token.value,
                    },
                },
            }
        end
        if token.type == 'string' then
            current=current+1
            return current,ASTNode{
                type='StringLiteral',
                u={
                    StringLiteral={
                        value=token.value,
                    },
                },
            }
        end
        if token.type == 'paren' and token.value == '(' then
            current=current+1
            token=tokens[current]
            local node = ASTNode{
                type='CallExpression',
                u={
                    CallExpression={
                        name=token.value,
                    },
                },
            }
            current=current+1
            token=tokens[current]
            while token.type ~= 'paren' or (token.type == 'paren' and token.value ~= ')') do
                local child:ASTNode
                current,child=walk(current,tokens)
                node.u.CallExpression.params:push(child)
                token=tokens[current]
            end
            current=current+1
            return current,node
        end
        error(string.format("Type error: `%s`", token.type))
    end
    local current=0
    local ast = ASTNode{
        'Program',
    }
    while current<#tokens do
        local node:ASTNode
        current,node=walk(current,tokens)
        ast.u.Program.body:push(node)
        --break
    end
    return ast
end
--[[
local function traverseNode(node: ASTNode, parent: pointer(ASTNode))
local function traverseArray(array: vector(ASTNode), parent: pointer(ASTNode))
    for i=0,<#array do
        traverseNode(array[i], parent)
    end
end
]]
local function traverseNode(node: ASTNode, parent: pointer(ASTNode))
    print('traverseNode: type=',node.type)
    if node.type=='NumberLiteral' then
        if parent._context~=nilptr then
            print('Pushing NumberLiteral !! parent=',parent, 'context=', parent._context)
            local ctx:*vector(*ASTNode)=$parent._context
            ctx:push(gc_allocator:new(ASTNode{
                type='NumberLiteral',
                u={
                    NumberLiteral={
                        value=node.u.NumberLiteral.value,
                    },
                },
            }))
            print('Done')
        end
    end
    if node.type=='StringLiteral' then
        print('Pushing StringLiteral !! parent=',parent, 'context=', parent._context)
        local ctx:*vector(*ASTNode)=$parent._context
        ctx:push(gc_allocator:new(ASTNode{
            type='StringLiteral',
            u={
                StringLiteral={
                    value=node.u.StringLiteral.value,
                },
            },
        }))
        print('Done')
    end
    if node.type=='CallExpression' then
        local expression=ASTNode{
            type='ExpressionStatement',
            u={
                ExpressionStatement={
                    expression={
                        type="CallExpression",
                        callee={
                            type='Identifier',
                            name=node.u.CallExpression.name,
                        },
                    },
                },
            },
        }
        node._context = &expression.u.ExpressionStatement.expression.arguments
        --[[if parent.type ~= 'CallExpression' then
            expression=@record{

            }
        end]]
        if parent._context~=nilptr then
            print('Pushing CallExpression !! parent=',parent, 'context=', parent._context)
            local ctx:*vector(*ASTNode)=$parent._context
            ctx:push(expression)
            print('Done')
        end
    end
    if node.type == 'Program' then
        --traverseArray(node.body, node)
        print('traversing array body for program')
        for i=0,<#node.u.Program.body do traverseNode(node.u.Program.body[i], node) end
    elseif node.type == 'CallExpression' then
        --traverseArray(node.params, node)
        print('traversing array params for callexpr')
        for i=0,<#node.u.CallExpression.params do traverseNode(node.u.CallExpression.params[i], node) end
    elseif node.type == 'NumberLiteral' or node.type == 'StringLiteral' then
        -- nothing special
        print('doing nothing special for callexpr')
    else
        error(string.format("Type error: `%s`", node.type))
    end
end
local function traverser(ast: ASTNode)
    traverseNode(ast, nilptr)
end
local function transformer(ast: ASTNode):ASTNode
    local newAst = ASTNode{
        type='Program',
    }
    ast._context = &newAst.u.Program.body
    traverser(ast)
    return newAst
end
local function codeGenerator(ast: ASTNode):string
    return "output code"
end
local function print_tokens(tokens:vector(Token))
    for t=0,<#tokens do
        print(tokens[t].type,tokens[t].value)
    end
end
local function compiler(input: string):string
    print('input=',input)
    local tokens=tokenizer(input)
    local ast=parser(tokens)
    local newAst=transformer(ast)
    local output=codeGenerator(newAst)
    --print_tokens(tokens)
    print_AST(ast)
    --print_newAST(newAst)
    return output
end
local source=[[
    (add 2 2)
    (subtract 4 2)
    (add 2 (subtract 4 2))
    ]]
local output=compiler(source)
print(output)
